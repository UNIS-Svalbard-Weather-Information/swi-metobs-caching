name: Detect and Remove API Keys

on:
  push:
    branches:
      - main
      - develop

jobs:
  sanitize_api_keys:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Scan for high-entropy API keys and sanitize
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use personal access token (PAT)
        run: |
          python3 <<EOF
          import os
          import re
          import math
          import subprocess

          # Function to calculate Shannon entropy
          def shannon_entropy(string):
              prob = [float(string.count(c)) / len(string) for c in dict.fromkeys(list(string))]
              return -sum([p * math.log2(p) for p in prob])

          # API key detection regex (adjust as needed)
          API_KEY_REGEX = re.compile(r'[A-Za-z0-9+/=]{32,}')
          ENTROPY_THRESHOLD = 4.5

          modified_files = []

          for root, _, files in os.walk("."):
              # Skip 'lib/' and 'libs/' folders
              if "/lib/" in root or "/libs/" in root:
                  continue

              for file in files:
                  if file.endswith((".py", ".json", ".env", ".yaml", ".yml", ".js", ".ts", ".txt")):
                      filepath = os.path.join(root, file)
                      try:
                          with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                              lines = f.readlines()
                              updated_lines = []
                              modified = False

                              for i, line in enumerate(lines):
                                  matches = API_KEY_REGEX.findall(line)
                                  for match in matches:
                                      entropy = shannon_entropy(match)
                                      if entropy > ENTROPY_THRESHOLD:
                                          print(f"üî¥ API key detected in {filepath} (line {i+1}) - Removing...")
                                          line = line.replace(match, "[Enter API Key]")
                                          modified = True

                                  updated_lines.append(line)

                              if modified:
                                  with open(filepath, 'w', encoding='utf-8') as f:
                                      f.writelines(updated_lines)
                                  modified_files.append(filepath)

                      except Exception as e:
                          print(f"‚ö†Ô∏è Error scanning {filepath}: {e}")

          if modified_files:
              print("\n‚úÖ API keys have been sanitized in the following files:")
              for file in modified_files:
                  print(f"  - {file}")
              
              # Configure Git
              subprocess.run(["git", "config", "--global", "user.name", "github-actions"])
              subprocess.run(["git", "config", "--global", "user.email", "actions@github.com"])

              # Commit and Push using PAT
              subprocess.run(["git", "add", "."])
              subprocess.run(["git", "commit", "-m", "üîí Removed API keys"])
              subprocess.run(["git", "push", "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/LouisPauchet/UNIS_SvalbardWeatherInformation.git"])

          else:
              print("‚úÖ No API keys detected.")

          EOF
