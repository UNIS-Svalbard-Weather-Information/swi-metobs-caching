name: Create Pre-release

on:
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed

jobs:
  create-pre-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check branch
        if: github.ref == 'refs/heads/master'
        run: echo "Running on master branch"

      - name: Checkout code
        if: github.ref == 'refs/heads/master'
        uses: actions/checkout@v2

      - name: Set up Git
        if: github.ref == 'refs/heads/master'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get previous tag
        if: github.ref == 'refs/heads/master'
        id: get_previous_tag
        run: |
          previous_tag=$(git describe --tags --match "1.0.*" --abbrev=0 2>/dev/null || echo "1.0.0")
          echo "PREVIOUS_TAG=$previous_tag" >> $GITHUB_ENV

      - name: Calculate new tag
        if: github.ref == 'refs/heads/master'
        id: calculate_new_tag
        run: |
          IFS='.' read -r -a version_parts <<< "$PREVIOUS_TAG"
          new_patch_version=$((version_parts[2] + 1))
          new_tag="1.0.$new_patch_version"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
        shell: bash

      - name: Read version file
        if: github.ref == 'refs/heads/master'
        id: read_version_file
        run: |
          if [[ -f "version" ]]; then
            version_name=$(awk 'NR==1' version)
            version_state=$(awk 'NR==3' version || echo "")
            echo "VERSION_NAME=$version_name" >> $GITHUB_ENV
            echo "VERSION_STATE=$version_state" >> $GITHUB_ENV
          else
            echo "Version file not found!"
            exit 1
          fi

      - name: Create pre-release
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: |
            SWI ( ${{ env.VERSION_NAME }} ${{ env.NEW_TAG }} ${{ env.VERSION_STATE && format('{0}', env.VERSION_STATE) || '' }} )
          body: Automated pre-release for commit ${{ github.sha }}
          draft: true
          prerelease: true
